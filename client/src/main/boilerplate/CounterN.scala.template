package org.lyranthe.prometheus.client.counter

import org.lyranthe.prometheus.client._
import org.lyranthe.prometheus.client.internal._
import org.lyranthe.prometheus.client.registry._

[#
final case class Counter1 private[client] (name: MetricName, help: String, labels: List[LabelName]) extends MetricFamily {
  private[client] val adders = new Adders[Tuple1[[#String#]], UnsynchronizedDoubleAdder](new UnsynchronizedDoubleAdder)

  override final val metricType = MetricType.Counter

  override final val escapedHelp = help.replace("\\", "\\\\").replace("\n", "\\n")

  def labelValues([#labelValue1: String#]): LabelledCounter =
    new LabelledCounter(name, labels, adders(Tuple1([#labelValue1#])))

  def remove([#labelValue1: String#]): Unit =
    adders.remove(Tuple1([#labelValue1: String#]))

  def clear(): Unit =
    adders.clear()

  override def collect(): List[Metric] =
    adders.getAll.map({
      case (labelValues, value) =>
        val labelAndValue = labels.zip(labelValues.productIterator.asInstanceOf[Iterator[String]].toIterable).map((LabelPair.apply _).tupled)
        CounterMetric(labelAndValue, value)
    })
}#
]
